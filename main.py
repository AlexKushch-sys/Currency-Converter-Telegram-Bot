import telebot
import logging
import os
from dotenv import load_dotenv
from telebot import types

# from api import get_monobank_rates, get_privatbank_rates  # –ë—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø—Ä—è–º—É
from api import get_rates #–Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
from db import add_conversion, get_history
from utils import get_currency_name
from keyboards import create_main_menu, create_currency_keyboard, create_swap_keyboard, create_source_keyboard

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è (—è–∫—â–æ config.py, —Ü–µ–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω)
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω (–∑–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è –∞–±–æ –∑ config.py)
TOKEN = os.getenv("TOKEN")  # –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à .env
# TOKEN = config.TOKEN # –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à config.py.  –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π, —è–∫—â–æ config.py

if TOKEN is None:
    raise ValueError(".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ TOKEN, –∞–±–æ –Ω–µ–º–∞—î –∑–º—ñ–Ω–Ω–æ—ó TOKEN —É config.py")

bot = telebot.TeleBot(TOKEN)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

user_data = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
DEFAULT_SOURCE = "monobank" #–ë–∞–Ω–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    show_main_menu(message)

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (—ñ –∫–æ–º–∞–Ω–¥–∞ /start)
@bot.message_handler(func=lambda message: message.text in ["üí± –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏", "üìà –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", "üìú –Ü—Å—Ç–æ—Ä—ñ—è", "üè¶ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–Ω–∫", "–°—Ç–∞—Ä—Ç"])
def handle_main_menu(message):
    if message.text == "üí± –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏" or message.text == "/convert":
        start_convert(message)
    elif message.text == "üìà –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç" or message.text == "/rates":
        show_rates(message)
    elif message.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞" or message.text == "/help":
        send_help(message)
    elif message.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è" or message.text == "/history":
        show_history(message)
    elif message.text == "üè¶ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–Ω–∫":
        select_source(message)
    elif message.text == "–°—Ç–∞—Ä—Ç":  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
        send_welcome(message)


def show_main_menu(message):
    markup = create_main_menu()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ keyboards.py
    user_name = message.from_user.first_name  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    chat_id = message.chat.id  # –û—Ç—Ä–∏–º—É—î–º–æ chat_id
    source = user_data.get(chat_id, {}).get('source', DEFAULT_SOURCE)  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∂–µ—Ä–µ–ª–æ
    source_name = "Monobank" if source == "monobank" else "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫"  # –ù–∞–∑–≤–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.reply_to(message, f"üëã –ü—Ä–∏–≤—ñ—Ç, {user_name}! –Ø –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç!\n\n"
                          f"–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —à–≤–∏–¥–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∞–ª—é—Ç–∏ –∑–∞ –∫—É—Ä—Å–æ–º {source_name}. üè¶\n\n"  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–∑–≤–æ—é –±–∞–Ω–∫—É
                          "–í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=markup)   # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∞–ª—é—Ç–∏ –∑–∞ –∫—É—Ä—Å–æ–º Monobank –∞–±–æ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É.

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º (–ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é).
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
/convert - –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∞–ª—é—Ç—É.
/rates - –ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç.
/history - –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ–π.
/source - –ó–º—ñ–Ω–∏—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç (Monobank/Privatbank).

–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–µ–Ω–µ –≤ inline-—Ä–µ–∂–∏–º—ñ. –í–≤–µ–¥—ñ—Ç—å –≤ –±—É–¥—å-—è–∫–æ–º—É —á–∞—Ç—ñ:
`@Converter_tutorial1_bot <—Å—É–º–∞> <–≤–∞–ª—é—Ç–∞> to <–≤–∞–ª—é—Ç–∞>`
–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `@Converter_tutorial1_bot 100 USD to UAH`
    """
    bot.reply_to(message, help_text, parse_mode="Markdown")  # parse_mode –¥–ª—è Markdown
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /rates (–ø–æ–∫–∞–∑—É—î –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç)
@bot.message_handler(commands=['rates'])
def show_rates(message):
    chat_id = message.chat.id
    source = user_data.get(chat_id, {}).get('source', DEFAULT_SOURCE) # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –∑ user_data
    rates = get_rates(source)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é get_rates –∑ api.py
    if rates:
        if source == "monobank":
            response_text = f"*–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç {source}:*\n```\n"  # Markdown (–∂–∏—Ä–Ω–∏–π —ñ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–∏–π)
            response_text += "–í–∞–ª—é—Ç–∞ | –ö—É–ø—ñ–≤–ª—è | –ü—Ä–æ–¥–∞–∂\n"
            response_text += "------- | -------- | --------\n"
            for rate in rates:
                currency_a = get_currency_name(rate.get('currencyCodeA'), source)  # utils.get_...
                currency_b = get_currency_name(rate.get('currencyCodeB'), source)
                rate_buy = rate.get('rateBuy')
                rate_sell = rate.get('rateSell')

                if rate_buy is not None and rate_sell is not None:
                    response_text += f"{currency_a}/{currency_b}    | {rate_buy:8.4f} | {rate_sell:8.4f}\n"
            response_text += "```"
            bot.reply_to(message, response_text, parse_mode="Markdown")  # –í–∫–∞–∑—É—î–º–æ parse_mode

        elif source == "privatbank":
            response_text = f"*–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç {source}:*\n```\n"
            response_text += "–í–∞–ª—é—Ç–∞ | –ö—É–ø—ñ–≤–ª—è | –ü—Ä–æ–¥–∞–∂\n"
            response_text += "------- | -------- | --------\n"
            for rate in rates:
                currency_a = rate.get('ccy')  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'ccy' –¥–ª—è –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É
                currency_b = rate.get('base_ccy')
                rate_buy = rate.get('buy')
                rate_sell = rate.get('sale')
                if currency_a and currency_b and rate_buy and rate_sell:
                    response_text += f"{currency_a}/{currency_b}    | {float(rate_buy):8.4f} | {float(rate_sell):8.4f}\n"
            response_text += "```"
            bot.reply_to(message, response_text, parse_mode="Markdown")
        else:
            bot.reply_to(message, f"–ù–µ–≤—ñ–¥–æ–º–µ –¥–∂–µ—Ä–µ–ª–æ –∫—É—Ä—Å—ñ–≤: {source}")

    else:
        bot.reply_to(message, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –∑ {source}.")
# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /source —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—é select_source
@bot.message_handler(commands=['source'])
def select_source(message):
    markup = create_source_keyboard() # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –≤–∏–±–æ—Ä–æ–º –±–∞–Ω–∫—ñ–≤
    bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç:", reply_markup=markup)
    bot.register_next_step_handler(message, process_source_selection)

def process_source_selection(message):
    chat_id = message.chat.id
    markup = create_source_keyboard()
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": #–Ω–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        show_main_menu(message)
        return
    if message.text not in ["Monobank", "PrivatBank"]:
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=markup)
        bot.register_next_step_handler(message, process_source_selection)
        return

    source = message.text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä–∞
    if source == "privatbank":
        source = "privatbank"  # –£–Ω—ñ—Ñ—ñ–∫—É—î–º–æ –Ω–∞–∑–≤—É

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ user_data
    if chat_id not in user_data:
      user_data[chat_id] = {} #–°—Ç–≤–æ—Ä—é—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î
    user_data[chat_id]['source'] = source
    bot.reply_to(message, f"–í–∏–±—Ä–∞–Ω–æ –¥–∂–µ—Ä–µ–ª–æ –∫—É—Ä—Å—ñ–≤: {message.text}", reply_markup=types.ReplyKeyboardRemove())
    show_main_menu(message)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /convert (–ø–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)
@bot.message_handler(commands=['convert'])
def start_convert(message):
    chat_id = message.chat.id
    user_data[chat_id] = user_data.get(chat_id, {}) #–°—Ç–≤–æ—Ä—é—î–º–æ –ø—É—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫, –∞–±–æ –±–µ—Ä–µ–º–æ —ñ—Å–Ω—É—é—á–∏–π
    user_data[chat_id]['state'] = 'awaiting_choice'  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("USD/UAH"), types.KeyboardButton("EUR/UAH"))
    markup.add(types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É"))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"

    msg = bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å —à–≤–∏–¥–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_choice)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó (—à–≤–∏–¥–∫–∞/—Ä—É—á–Ω–∞)
def process_choice(message):
    chat_id = message.chat.id

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        show_main_menu(message)  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        return

    if message.text == "USD/UAH":
        user_data[chat_id]['from_currency'] = "USD"
        user_data[chat_id]['to_currency'] = "UAH"
        user_data[chat_id]['state'] = 'awaiting_amount'
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ USD:", reply_markup=types.ReplyKeyboardRemove()) #–ö–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—Ä–∏–±–∏—Ä–∞—î–º–æ
        bot.register_next_step_handler(message, process_amount) #–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ process_amount

    elif message.text == "EUR/UAH":
        user_data[chat_id]['from_currency'] = "EUR"
        user_data[chat_id]['to_currency'] = "UAH"
        user_data[chat_id]['state'] = 'awaiting_amount'
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ EUR:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_amount) #–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ process_amount

    elif message.text == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É":
        user_data[chat_id]['state'] = 'awaiting_amount'
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:", reply_markup=types.ReplyKeyboardRemove()) #–ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        bot.register_next_step_handler(message, process_amount) #–ü–µ—Ä–µ–¥–∞—î–º–æ process_amount
    else:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
        start_convert(message)  # –ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É
# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ (–æ–±'—î–¥–Ω–∞–Ω–∏–π –¥–ª—è —à–≤–∏–¥–∫–æ—ó —Ç–∞ —Ä—É—á–Ω–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)
def process_amount(message):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó.  –ü—Ä–∞—Ü—é—î —è–∫ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó,
    —Ç–∞–∫ —ñ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∞–ª—é—Ç.  –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
    """
    chat_id = message.chat.id
    markup = create_currency_keyboard(back_button=True)  # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        start_convert(message)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ—á–∞—Ç–∫—É (–≤–∏–±—ñ—Ä —à–≤–∏–¥–∫–æ—ó/—Ä—É—á–Ω–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É.  –Ø–∫—â–æ —Å—Ç–∞–Ω –Ω–µ 'awaiting_amount', —Ç–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.
    # (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –∫–æ–º–∞–Ω–¥—É /start –ø—ñ–¥ —á–∞—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó).
    if chat_id not in user_data or user_data[chat_id].get('state') != 'awaiting_amount':
        bot.reply_to(message, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω—ñ—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –∑–Ω–æ–≤—É.", reply_markup=types.ReplyKeyboardRemove())
        if chat_id in user_data:  # –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ, —è–∫—â–æ –≤–æ–Ω–∏ —î, —â–æ–± –Ω–µ –±—É–ª–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
            del user_data[chat_id]
        show_main_menu(message)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        return  # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó

    try:
        # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —á–∏—Å–ª–æ (float)
        amount = float(message.text)
        if amount <= 0:
            # –Ø–∫—â–æ —Å—É–º–∞ –º–µ–Ω—à–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, –≥–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–Ω—è—Ç–æ–∫
            raise ValueError("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å")

        # –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ (—Å—É–º–∞ - –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ), –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó –≤ user_data
        user_data[chat_id]['amount'] = amount
        user_data[chat_id]['state'] = 'awaiting_from_currency'  # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞ "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ—ó –≤–∞–ª—é—Ç–∏"

        # –Ø–∫—â–æ —Ü–µ —à–≤–∏–¥–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è (–≤–∞–ª—é—Ç–∏ –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ), –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        if 'from_currency' in user_data[chat_id] and 'to_currency' in user_data[chat_id]:
             user_data[chat_id]['state'] = None  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
             convert_currency(chat_id, message)
             return
        # –Ø–∫—â–æ —Ä—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏
        msg = bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏—Ö—ñ–¥–Ω—É –≤–∞–ª—é—Ç—É:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_from_currency_step)


    except ValueError as e:
        # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ (–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ), –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ü–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        bot.reply_to(message, f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –ü–æ–º–∏–ª–∫–∞: {e}", reply_markup=types.ReplyKeyboardRemove())
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–∏—Ç—É—î–º–æ —Å—É–º—É
        msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:")
        bot.register_next_step_handler(msg, process_amount)
# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –≤–∏—Ö—ñ–¥–Ω–æ—ó –≤–∞–ª—é—Ç–∏
def process_from_currency_step(message):
    chat_id = message.chat.id
    markup = create_currency_keyboard(back_button=True)  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏.  –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω.
        user_data[chat_id]['state'] = 'awaiting_amount'
        msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:", reply_markup=types.ReplyKeyboardRemove()) #–ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        bot.register_next_step_handler(msg, process_amount)
        return

    from_currency = message.text  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–∞–∑–≤—É –≤–∞–ª—é—Ç–∏)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∏–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö
    if from_currency not in ["USD", "EUR", "UAH", "GBP", "PLN"]:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∞–ª—é—Ç–∞.", reply_markup=markup)
        msg = bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏—Ö—ñ–¥–Ω—É –≤–∞–ª—é—Ç—É:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_from_currency_step)  # –ó–Ω–æ–≤—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ü—é –∂ —Ñ—É–Ω–∫—Ü—ñ—é
        return

    # –Ø–∫—â–æ –≤–∞–ª—é—Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∞, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó –≤ user_data
    user_data[chat_id]['from_currency'] = from_currency
    user_data[chat_id]['state'] = 'awaiting_to_currency'  # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞ "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏"
    msg = bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –≤–∞–ª—é—Ç—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_to_currency_step)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ü—ñ–ª—å–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ü—ñ–ª—å–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏
def process_to_currency_step(message):
    chat_id = message.chat.id
    markup = create_currency_keyboard(back_button=True)  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É *–≤–∏—Ö—ñ–¥–Ω–æ—ó* –≤–∞–ª—é—Ç–∏, –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω
        user_data[chat_id]['state'] = 'awaiting_from_currency'
        msg = bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏—Ö—ñ–¥–Ω—É –≤–∞–ª—é—Ç—É:", reply_markup=markup) #–ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        bot.register_next_step_handler(msg, process_from_currency_step)
        return

    to_currency = message.text  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–∞–∑–≤—É —Ü—ñ–ª—å–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∞–ª—é—Ç–∞ —î –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö
    if to_currency not in ["USD", "EUR", "UAH", "GBP", "PLN"]:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∞–ª—é—Ç–∞.", reply_markup=markup)
        msg = bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –≤–∞–ª—é—Ç—É:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_to_currency_step)  # –ó–Ω–æ–≤—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ü—é –∂ —Ñ—É–Ω–∫—Ü—ñ—é
        return

    # –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–ª—å–æ–≤—É –≤–∞–ª—é—Ç—É –≤ user_data
    user_data[chat_id]['to_currency'] = to_currency
    user_data[chat_id]['state'] = None  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞/–≥–æ—Ç–æ–≤–∞ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–º—ñ–Ω—è—Ç–∏ –º—ñ—Å—Ü—è–º–∏"
    markup = create_swap_keyboard()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ keyboards.py
    convert_currency(chat_id, message, markup)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
def convert_currency(chat_id, message, reply_markup=None):
    """
    –í–∏–∫–æ–Ω—É—î –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –≤–∞–ª—é—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –≤ user_data,
    —ñ –Ω–∞–¥—Å–∏–ª–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    source = user_data.get(chat_id, {}).get('source', DEFAULT_SOURCE)
    rates = get_rates(source)

    if not rates:
        bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç.", reply_markup=types.ReplyKeyboardRemove())
        if chat_id in user_data:
            del user_data[chat_id]
        show_main_menu(message)
        return

    rate = None
    for r in rates:
        if source == "monobank":
            if get_currency_name(r.get('currencyCodeA')) == user_data[chat_id]['from_currency'] and \
                get_currency_name(r.get('currencyCodeB')) == user_data[chat_id]['to_currency']:
                rate = r
                break
            if get_currency_name(r.get('currencyCodeB')) == user_data[chat_id]['from_currency'] and \
                get_currency_name(r.get('currencyCodeA')) == user_data[chat_id]['to_currency']:
                rate = r
                break
        elif source == "privatbank":
            if r.get('ccy') == user_data[chat_id]['from_currency'] and r.get('base_ccy') == user_data[chat_id]['to_currency']:
                rate = r
                break

    if not rate:
        bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å –¥–ª—è —Ü—ñ—î—ó –ø–∞—Ä–∏ –≤–∞–ª—é—Ç.", reply_markup=types.ReplyKeyboardRemove())
        if chat_id in user_data:
            del user_data[chat_id]
        show_main_menu(message)
        return

    if source == "monobank":
        if 'rateBuy' in rate and 'rateSell' in rate:
            if user_data[chat_id]['from_currency'] == 'UAH':
                converted_amount = user_data[chat_id]['amount'] / rate['rateSell']
            elif user_data[chat_id]['to_currency'] == 'UAH':
                    converted_amount = user_data[chat_id]['amount'] * rate['rateBuy']
            else:  # –ú—ñ–∂ —ñ–Ω–æ–∑–µ–º–Ω–∏–º–∏
                if 'rateCross' in rate:
                        converted_amount = user_data[chat_id]['amount'] * rate['rateCross']
                else:
                    bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—Ä–æ—Å-–∫—É—Ä—Å.", reply_markup=types.ReplyKeyboardRemove())
                    if chat_id in user_data:
                        del user_data[chat_id]
                    show_main_menu(message)
                    return
        else:
            bot.reply_to(message, "–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫—É—Ä—Å–∏ (–∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É).", reply_markup=types.ReplyKeyboardRemove())
            if chat_id in user_data:
                del user_data[chat_id]
            show_main_menu(message)
            return

    elif source == "privatbank":
        if 'buy' in rate and 'sale' in rate:
            if user_data[chat_id]['from_currency'] == "UAH":
                converted_amount = user_data[chat_id]['amount'] / float(rate['sale'])  # –ù–µ –∑–∞–±—É–≤–∞—î–º–æ –ø—Ä–æ float
            else:
                converted_amount = user_data[chat_id]['amount'] * float(rate['buy']) # –ù–µ –∑–∞–±—É–≤–∞—î–º–æ –ø—Ä–æ float
        else:
                bot.reply_to(message, "–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫—É—Ä—Å–∏ (–∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É).", reply_markup=types.ReplyKeyboardRemove())
                if chat_id in user_data:
                    del user_data[chat_id]
                show_main_menu(message)
                return


    formatted_amount = "{:.2f}".format(converted_amount)
    bot.reply_to(message, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {formatted_amount} {user_data[chat_id]['to_currency']}", reply_markup=reply_markup)

    add_conversion(chat_id, user_data[chat_id]['amount'], user_data[chat_id]['from_currency'],
                    user_data[chat_id]['to_currency'], converted_amount)
    if chat_id in user_data:
        del user_data[chat_id]
# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º—ñ–Ω—è—Ç–∏ –º—ñ—Å—Ü—è–º–∏"
@bot.callback_query_handler(func=lambda call: call.data == "swap_currencies")
def handle_swap_currencies(call):
    chat_id = call.message.chat.id
    if chat_id in user_data:
        # –ú—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏ from_currency —ñ to_currency
        user_data[chat_id]['from_currency'], user_data[chat_id]['to_currency'] = \
            user_data[chat_id]['to_currency'], user_data[chat_id]['from_currency']

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é convert_currency, –ø–µ—Ä–µ–¥–∞—é—á–∏ *–ù–û–í–£* –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        markup = create_swap_keyboard()  # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        convert_currency(chat_id, call.message, markup)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        bot.answer_callback_query(call.id)  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ callback

    else:
        bot.answer_callback_query(call.id, "–î–∞–Ω—ñ –ø—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
        show_main_menu(call.message)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /history (–ø–æ–∫–∞–∑—É—î —ñ—Å—Ç–æ—Ä—ñ—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ–π)
@bot.message_handler(commands=['history'])
def show_history(message):
    chat_id = message.chat.id
    history = get_history(chat_id)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ db.py
    if history:
        response_text = "*–Ü—Å—Ç–æ—Ä—ñ—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ–π:*\n```\n"  # Markdown (–∂–∏—Ä–Ω–∏–π —ñ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–∏–π —à—Ä–∏—Ñ—Ç)
        response_text += "–°—É–º–∞ | –ó–≤—ñ–¥–∫–∏ | –ö—É–¥–∏ | –†–µ–∑—É–ª—å—Ç–∞—Ç | –ß–∞—Å\n"
        response_text += "------|-------|------|-----------|-----\n"
        for row in history:
            amount, from_currency, to_currency, converted_amount, timestamp = row
            response_text += f"{amount:5.2f} | {from_currency:5} | {to_currency:4} | {converted_amount:9.2f} | {timestamp}\n"
        response_text += "```"
        bot.reply_to(message, response_text, parse_mode="Markdown")  # parse_mode='Markdown'
    else:
        bot.reply_to(message, "–Ü—Å—Ç–æ—Ä—ñ—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ–π –ø–æ—Ä–æ–∂–Ω—è.")

# –û–±—Ä–æ–±–Ω–∏–∫ inline-–∑–∞–ø–∏—Ç—ñ–≤
@bot.inline_handler(lambda query: True)
def inline_converter(inline_query):
    """
    –û–±—Ä–æ–±–ª—è—î inline-–∑–∞–ø–∏—Ç–∏
    """
    try:
        parts = inline_query.query.split()
        if len(parts) >= 4 and parts[2].lower() == "to":
            amount = float(parts[0])
            from_currency = parts[1].upper()
            to_currency = parts[3].upper()

            if from_currency not in ["USD", "EUR", "UAH", "GBP", "PLN"] or to_currency not in ["USD", "EUR", "UAH", "GBP", "PLN"]:
                raise ValueError("Invalid currency")

            rates = get_rates("monobank")  # –¢—ñ–ª—å–∫–∏ Monobank –¥–ª—è inline
            if rates:
                rate = None
                for r in rates:
                    if get_currency_name(r.get('currencyCodeA')) == from_currency and \
                       get_currency_name(r.get('currencyCodeB')) == to_currency:
                        rate = r
                        break
                    if get_currency_name(r.get('currencyCodeB')) == from_currency and \
                       get_currency_name(r.get('currencyCodeA')) == to_currency:
                        rate = r
                        break

                if rate:
                    if rate.get('rateBuy') is not None and rate.get('rateSell') is not None:
                        if from_currency == 'UAH':
                            converted_amount = amount / rate.get('rateSell')
                        else:
                            converted_amount = amount * rate.get('rateBuy')
                    elif rate.get('rateCross') is not None:
                        converted_amount = amount * rate.get('rateCross')
                    else:
                        raise ValueError("Currency rate not found")

                    result = "{:.2f}".format(converted_amount)
                    rate_text = ""
                    if rate.get('rateBuy') and rate.get('rateSell'):
                       if from_currency == "UAH":
                         rate_text = f"–ö—É—Ä—Å: 1 {to_currency} = {rate.get('rateSell'):.4f} {from_currency}"
                       else:
                          rate_text = f"–ö—É—Ä—Å: 1 {from_currency} = {rate.get('rateBuy'):.4f} {to_currency}"
                    elif rate.get('rateCross'):
                       rate_text = f"–ö—É—Ä—Å: 1 {from_currency} = {rate.get('rateCross'):.4f} {to_currency}"

                    r = types.InlineQueryResultArticle(
                        '1',
                        f'Convert {amount} {from_currency} to {to_currency}',
                        types.InputTextMessageContent(f"{amount} {from_currency} = {result} {to_currency}\n{rate_text}")
                    )
                    bot.answer_inline_query(inline_query.id, [r])

                else:
                  raise ValueError("Currency rate not found")
            else:
              raise ValueError("Could not retrieve currency rates")

        else:
            return

    except ValueError as e:
        print(f"Inline query error: {e}")
        return
    except Exception as e:
        print(f"Inline query error: {e}")
        return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.infinity_polling()